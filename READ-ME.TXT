
----------------------------------------------------------------------
-- faire touner l'application dans un cluster (testé sur minkube) 
----------------------------------------------------------------------

1- on package le jar 
dans le folder /git/k8s-java-postgres : 
mvn clean package -Dmaven.test.skip 

2- on build notre image docker 
dans le folder /git/k8s-java-postgres : 
docker build -t itdriveview/k8s-java-postgres:1.0 .

  CONSEIL!
  --------
  dés que je modifie mon jar packagé, il est préférable de builder avec un nouveau tag: 2.0 3.0 etc
  ça permet de s'assurer que kubernetes pullera bien une NOUVELLE image et non pas une image en cache dans son cluster 
  (le nouveau contenu, avec le même tag est bien poussé sur Docker Hub, mais n'est pas forcément pullé sur le cluster)

3- je push mon image dans mon registry docker (Docker Hub) 
docker push itdriveview/k8s-java-postgres:1.0

4- je cherche à la racine du folder /git/k8s-java-postgres tous mes fichiers contenant l'expression itdriveview :
grep -R itdriveview

==> il me ressort le fichier : src/main/resources/kubernetes/deployment.yml

j'édite mon fichier pour être sûr que cette spec yaml contient bien le nom exact de l'image et du tag 

==> image: itdriveview/k8s-java-postgres:1.0 ==> c'est OK 

5- je crée ma ressource ConfigMap
dans le folder git/k8s-java-postgres/src/main/resources/kubernetes : 
kubectl apply -f postgres-configmap.yml 

5- je crée ma ressource Secret
kubectl apply -f postgres-credentials.yml

6- je crée ma ressource Deployment pour Postgres (et ses autres ressources incluses dans la spec)
kubectl apply -f postgres-deployment.yml

7- je crée ma ressource Deployment pour mon application SpringBoot (et ses autres ressources incluses dans la spec)
kubectl apply -f deployment.yml

8- je liste mes ressources Pod démarrées 
kubectl get po 

9- je regarde les logs de l'un des Pod pour m'assurer que l'application spring boot a bien démarré :
kubectl logs springboot-postgres-k8s-74dbc65d4-87b7t

====> 10A tester l'application via un port-forward =================================

	10A-1 je fais un port-forward de l'un des Pod, par exemple : 
	kubectl port-forward springboot-postgres-k8s-5495bddf67-5xqtd 8099:8080

	10A-2 dans un Postman, je teste mon application avec du POST 
	http://localhost:8099/api/employees

		payload json = 
		{
		    "name" : "DELDOUT"
		}

	et avec le verbe GET
	http://localhost:8089/api/employees

====> 10B tester l'application via un service =====================================

	10B-1 j'ai besoin de connaître l'adresse IP d'un des noeuds du cluster (ici, un seul, puisque sur minikube) :
	kubectl get nodes -o wide
	==> 192.168.49.2

	10b-2 je liste mes services et je récupère le NodePort du service qui expose le Pod de l'appli spring-boot :
	kubectl get svc 
	==> 30163

	10b-3 je peux maintenant atteindre mon Pod spring boot en passant par l'ip du noeud et le NodePort : 
	avec Postman, j'ai juste à utiliser cette url : 
	http://192.168.49.2:30163/api/employees

	avec les verbes POST et GET

-----------------------------------------------------------------
-- bien comprendre les mécanismes 
-----------------------------------------------------------------

se référer au fichier drive : 
https://docs.google.com/document/d/18N2n_cTMbw5nLXyxR0P_KlQKW0LDPzUOfvVcPLCxYZg/edit#heading=h.9ze0yd4r0sxb

ou le retrouver dans mon arbo drive avec les mots clés: 
kubernetes WORKFLOWS et CORRESPONDANCES
 
----------------------------------------------------------------
-- si je veux faire tourner mon appli spring boot en local 
----------------------------------------------------------------

pour simplement tester, mon application spring boot localement, sans kubernetes, ni docker : 

1- je dois avoir un serveur postgres local démarré, hébergeant une base de données nommée employedb 

   A) je me connecte via psql
      sudo -i -u postgres 
      psql 

   B) je crée ma base de données employeedb 
      create DATABASE employeedb ;

   C) je quitte psql 
      exit
      exit 


2- je crée ces variables d'environnement afin que spring boot puisse les utiliser à l'étape suivante :
export DB_HOST=localhost;export DB_NAME=employeedb;export POSTGRES_USER=postgres;export POSTGRES_PASSWORD=postgres

3- je package mon application java. 
Dans le folder /git/k8s-java-postgres :
mvn clean package -Dmaven.test.skip

4- je démarre mon application java
Dans le folder /git/k8s-java-postgres :
java -jar target/springboot-postgres-k8s-0.0.1-SNAPSHOT.jar

	remarque:
        il faut démarrer l'appli java dans le même terminale que celui où on a créé nos variables d'environnement (elles risquent de ne pas être vues sinon)    

10- dans un Postman, je teste mon application avec du POST
http://localhost:8099/api/employees

        payload json =
        {
            "name" : "DELDOUT"
        }

et avec le verbe GET
http://localhost:8089/api/employees

